<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="help" name="project">

	<!-- Properties for the flight RM -->
	<property name="rm.flight.target" value="server" />
	<property name="rm.flight.name" value="rm_flight"/>
	<property name="rm.flight.host" value="localhost"/>
	<property name="rm.flight.port" value="38081"/>
    <property name="rm.flight.debugport" value="38091"/>
	
	<!-- Properties for the car RM -->
	<property name="rm.car.target" value="server" />
	<property name="rm.car.name" value="rm_car"/>
	<property name="rm.car.host" value="localhost"/>
	<property name="rm.car.port" value="38082"/>
    <property name="rm.car.debugport" value="38092"/>
	
	<!-- Properties for the room RM -->
	<property name="rm.room.target" value="server" />
	<property name="rm.room.name" value="rm_room"/>
	<property name="rm.room.host" value="localhost"/>
	<property name="rm.room.port" value="38083"/>
    <property name="rm.room.debugport" value="38093"/>
	
	<!-- Properties for the customer RM -->
	<property name="rm.customer.target" value="server" />
	<property name="rm.customer.name" value="rm_customer"/>
	<property name="rm.customer.host" value="localhost"/>
	<property name="rm.customer.port" value="38084"/>
    <property name="rm.customer.debugport" value="38094"/>

	<!-- Properties for the middleware -->
	<property name="mw.target" value="middleware" />
	<property name="mw.name" value="mw"/>
	<property name="mw.host" value="localhost" />
	<property name="mw.port" value="38080"/>
    <property name="mw.debugport" value="38090"/>
	
	<!-- Properties for the automated client -->
	<property name="autocli.txnrate" value="1" />
	<property name="autocli.txnfile" value="${basedir}/test_runs/t1.txt" />
	<property name="autocli.ntxn" value="1" />

    <path id="jaxws.classpath">
        <pathelement location="${java.home}/../lib/tools.jar"/>
        <pathelement location="${java.home}/../jre/lib/rt.jar"/>
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
        </fileset>
    </path>
	
	<taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
        <classpath refid="jaxws.classpath"/>
    </taskdef>
	
    <target name="clean">
        <delete dir="${basedir}/build" includeEmptyDirs="true"/>
    </target>

    <target name="setup">
        <mkdir dir="${basedir}/build"/>
        <mkdir dir="${basedir}/build/classes"/>
        <mkdir dir="${basedir}/build/war"/>
        <mkdir dir="${basedir}/webapps"/>
    </target>

    <taskdef name="annotationProcessing" 
             classname="com.sun.tools.ws.ant.AnnotationProcessingTask">
        <classpath refid="jaxws.classpath"/>
    </taskdef>

	<!-- Build a webservice according to a provided target. -->
    <target name="build-ws" depends="setup">
        <annotationProcessing
                fork="true"
                debug="true"
                verbose="${verbose}"
                destdir="${basedir}/build/classes"
                srcdir="${basedir}/src"
                includes="${service.target}/**"
                sourceDestDir="${basedir}/build/classes"
                procOnly="false"
                sourcepath="${basedir}/src">
            <classpath>
                <path refid="jaxws.classpath"/>
                <pathelement location="${basedir}/src"/>
            </classpath>
        </annotationProcessing>
    </target>

	<!-- Build the main class of a web server according to a provided target. -->
	<target name="build-main">
		<javac
			fork="true"
			srcdir="${basedir}/src/main/${service.target}"
			destdir="${basedir}/build/">
			<classpath refid="jaxws.classpath"/>
		</javac>
	</target>
	
	<target name="create-webxml">
		<!-- Delete previous web.xml -->
		<delete file="etc/${service.target}/web.xml" />
		
		<!-- Load the environment for this target -->
		<loadfile srcFile="${service.target}_environment.xml" property="webenv"/>
		
		<!-- Load the web.xml template, replacing into it the environment for
		the target. -->
		<loadfile property="webxml" srcFile="web_template.xml">
			<filterchain>
				<!-- Do two expansion phases. The first one replaces ${webenv}
				in the template by the environment for the target, and the
				second expands any properties specified in the environment
				itself -->
				<filterreader classname="org.apache.tools.ant.filters.ExpandProperties" />
				<filterreader classname="org.apache.tools.ant.filters.ExpandProperties" />
				
			</filterchain>
		</loadfile>
		
		<!-- Write out the finished web.xml -->
		<touch file="etc/${service.target}/web.xml" />
		<echo file="etc/${service.target}/web.xml" message="${webxml}" />
	</target>
	
	<!-- Create the WAR file for a given target webservice. -->
    <target name="create-war">
        <war 
            warfile="${basedir}/build/war/${service.name}.war" 
            webxml="etc/${service.target}/web.xml">
            <webinf dir="${basedir}/etc/${service.target}" includes="sun-jaxws.xml"/>
            <zipfileset
                    dir="${basedir}/etc/${service.target}"
                    includes="*.wsdl, *.xsd"
                    prefix="WEB-INF/wsdl"/>
            <classes dir="${basedir}/build/classes"/>
        </war>
    </target>

	<!-- Deploy the WAR file for a given target webservice. -->
    <target name="deploy-war">
        <delete dir="${basedir}/webapps/${service.name}" 
            includeEmptyDirs="true"/>
        <mkdir dir="${basedir}/webapps/${service.name}"/>        
        <unzip 
            src="${basedir}/build/war/${service.name}.war"
            dest="${basedir}/webapps/${service.name}"/>
    </target>
    
	<!-- Start tomcat with a given webservice. -->
    <target name="start-tomcat" depends="build-main">
        <echo message="Starting Tomcat and deploying service ... "/>
        <java fork="true" classname="main.${service.target}.Main">
            <classpath>
                <path refid="jaxws.classpath"/>
                <pathelement location="${basedir}/build"/>
            </classpath>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:server=y,transport=dt_socket,address=${service.debugport},suspend=n"/>
            <jvmarg value="-Djava.security.policy=${basedir}/etc/${service.target}/server.policy"/>
            <arg value="${service.name}"/>
            <arg value="${service.port}"/>
            <arg value="${basedir}/webapps"/>
        </java>
    </target>

	<!--- Generate and start a web service.  The service.* properties
	must be set. -->
	<target name="ws">
		<antcall target="build-ws"/>
        <antcall target="create-war" />
        <antcall target="deploy-war"/>
        <antcall target="start-tomcat"/>  
	</target>
	
	<!-- Generate the middleware, from the WSDLs of the existing RMs. -->
	<target name="generate-middleware">
		<wsimport
            quiet="true"
            keep="true"
            destdir="${basedir}/build/classes"
            package="middleware"
            wsdl="http://${rm.flight.host}:${rm.flight.port}/${rm.flight.name}/service?wsdl">
        </wsimport>
		<wsimport
            quiet="true"
            keep="true"
            destdir="${basedir}/build/classes"
            package="middleware"
            wsdl="http://${rm.car.host}:${rm.car.port}/${rm.car.name}/service?wsdl">
        </wsimport>
		<wsimport
            quiet="true"
            keep="true"
            destdir="${basedir}/build/classes"
            package="middleware"
            wsdl="http://${rm.room.host}:${rm.room.port}/${rm.room.name}/service?wsdl">
        </wsimport>
		<wsimport
            quiet="true"
            keep="true"
            destdir="${basedir}/build/classes"
            package="middleware"
            wsdl="http://${rm.customer.host}:${rm.customer.port}/${rm.customer.name}/service?wsdl">
        </wsimport>
	</target>
	
	<!-- Generate and run the middleware. -->
	<target name="middleware" depends="setup">
		<antcall target="create-webxml">
			<param name="service.target" value="middleware" />
		</antcall>
		<antcall target="generate-middleware" />
		<antcall target="ws">
			<propertyset id="mw_props">
				<propertyref prefix="mw." />
				<mapper type="glob" from="mw.*" to="service.*" />
			</propertyset>
		</antcall>
	</target>
	
	<!-- Generate and run a RM, with an appropriate name. -->
	<target name="rm">
		<antcall target="ws">
			<propertyset id="rm_props">
				<propertyref prefix="rm.${rm_name}." />
				<mapper type="glob" from="rm.${rm_name}.*" to="service.*" />
			</propertyset>
		</antcall>
	</target>
	
	<!-- Generate and run all RMs in parallel. -->
	<target name="rms">
		<antcall target="create-webxml">
			<param name="service.target" value="server" />
		</antcall>
		<parallel>
			<antcall target="rm">
				<param name="rm_name" value="flight" />
			</antcall>
			<antcall target="rm">
				<param name="rm_name" value="car" />
			</antcall>
			<antcall target="rm">
				<param name="rm_name" value="room" />
			</antcall>
			<antcall target="rm">
				<param name="rm_name" value="customer" />
			</antcall>
		</parallel>
	</target>

    <target name="generate-client" depends="setup">
        <wsimport
                quiet="true"
                keep="true"
                destdir="${basedir}/build/classes"
                package="client"
                wsdl="http://${mw.host}:${mw.port}/${mw.name}/service?wsdl">
        </wsimport>
    </target>

    <target name="build-client" depends="generate-client">
        <javac
                fork="true"
                srcdir="${basedir}/src"
                destdir="${basedir}/build/classes"
                includes="client/**">
            <classpath refid="jaxws.classpath"/>
        </javac>
    </target>

    <target name="client" depends="build-client">
        <java classname="client.Client">
            <classpath>
                <path refid="jaxws.classpath"/>
                <pathelement location="${basedir}/build/classes"/>
            </classpath>
            <arg value="${mw.name}"/>
            <arg value="${mw.host}"/>
            <arg value="${mw.port}"/>
        </java>
    </target>
	
	<target name="autoclient" depends="build-client">
        <java classname="client.AutoClient">
            <classpath>
                <path refid="jaxws.classpath"/>
                <pathelement location="${basedir}/build/classes"/>
            </classpath>
            <arg value="${mw.name}"/>
            <arg value="${mw.host}"/>
            <arg value="${mw.port}"/>
			<arg value="${autocli.txnfile}"/>
            <arg value="${autocli.txnrate}"/>
            <arg value="${autocli.ntxn}"/>
        </java>
    </target>

    <target name="help">
        <echo message="rms:  Builds and deploys all the RMs."/>
		<echo message="middleware:  Builds and deploys the middleware."/>
        <echo message="client:  Builds and runs the interactive client."/>
		<echo message="autoclient:  Builds and runs the automated client."/>
    </target>
    
</project>
